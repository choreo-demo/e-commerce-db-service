import ballerina/io;
import ballerina/sql;
import ballerinax/java.jdbc;
import ballerinax/mysql;
import ballerinax/mysql.driver as _;
import ballerina/http;
import ballerina/log;

// configurable string password = ?; 
// configurable string host = ?; 
// configurable int port = ?; 
// configurable string db = ?; 
// configurable string username = ?;


configurable string password = "rootroot"; 
configurable string host = "34.171.110.167";
configurable int port = 3306;
configurable string db = "eComSiteForChoreoAsardeoAndBallerina";
configurable string username = "root";

type Item record {
    string ID;
    string Title;
    string Description;
    string Includes;
    string IntendedFor;
    string Color;
    string Material;
    float Price;
};

type InsertExecutionResult record {
    int affectedRowCount;
    int lastInsertId;
};

// @http:ServiceConfig {
//     cors: {
//         allowOrigins: ["http://localhost:3000"],
//         allowCredentials: false,
//         allowHeaders: ["CORELATION_ID"],
//         exposeHeaders: ["X-CUSTOM-HEADER"],
//         maxAge: 84900
//     }
// }
service /rest on new http:Listener(9091) {

    private final mysql:Client dbClient;

    function init() returns error? {
        log:printInfo("Cake API started", host = "0.0.0.0", port = 9091, protocol = "HTTP");
        mysql:Options mysqlOptions = {
            ssl: {
                mode: mysql:SSL_PREFERRED
            },
            connectTimeout: 10
        };
        do {
            self.dbClient = check new (host = host, user = username, password = password, database = db, port = port, connectionPool = {maxOpenConnections: 3});
        } on fail var e {
            log:printError("Error occurred while connecting to MySQL", e);
        }
        log:printInfo("Connected to database !");
    }

    resource function get menu() returns json|http:Ok|http:InternalServerError|error {
        json response = {"Butter Cake": 15, "Chocolate Cake": 20, "Tres Leches": 25};
        http:Ok ok = {body: response};
        return ok;
    }
    resource function post item(@http:Payload map<json> jsonString) returns string {
        return self.addOrEditItem(jsonString, false);
    }

    resource function put item(@http:Payload map<json> jsonString) returns string {
        return self.addOrEditItem(jsonString, true);
    }

    resource function delete item(@http:Payload map<json> jsonString) returns string {
        return self.addOrEditItem(jsonString, true);
    }

    resource function post purchaseItems(@http:Payload map<json> mapJson) returns string {
        string itemList = <string>mapJson["itemList"];
        float total = <float>mapJson["total"];
        string name = <string>mapJson["name"];
        int cardNum = <int>mapJson["cardNum"];
        // jdbc:Client|sql:Error dbClient = new (hostPortDB, username, password, poolOptions: {maximumPoolSize: 5});
        io:println("DB Client initiated");
        if (self.dbClient is jdbc:Client) {
            io:println("DB Client created successfully");
            io:println(`INSERT INTO PurchaseTable (itemList, total, name, cardNum) VALUES ${itemList}, ${total}, ${name}, ${cardNum})`);
            if (self.dbClient is jdbc:Client) {
                do {
                    sql:ParameterizedQuery query = `INSERT INTO PurchaseTable (itemList, total, name, cardNum) VALUES (${itemList}, ${total}, ${name}, ${cardNum})`;
                    sql:ExecutionResult result = check self.dbClient->execute(query);
                    io:println("Item inserted: ", result);
                    int? count = result.affectedRowCount;
                    //The integer or string generated by the database in response to a query execution.
                    string|int? generatedKey = result.lastInsertId;
                    // json jsonResultObject = <json>result;
                    // InsertExecutionResult|error insertExecutionResult = jsonResultObject.fromJsonWithType();
                    if (generatedKey is string) {
                        return generatedKey;
                    } else {
                        return generatedKey.toString();
                    }
                } on fail var e {
                    io:println("Exception occurred when inserting. ", e);
                    return "Exception occurred when inserting or updating";
                }
            }
        }
    }

    function addOrEditItem(map<json> mapJson, boolean isPut) returns string {
        int id = -1;
        if (isPut) {
            id = <int>mapJson["id"];
        }
        string title = <string>mapJson["title"];
        string description = <string>mapJson["description"];
        string intendedFor = <string>mapJson["intendedFor"];
        string includes = <string>mapJson["includes"];
        string color = <string>mapJson["color"];
        string material = <string>mapJson["material"];
        float price = <float>mapJson["price"];
        // jdbc:Client|sql:Error dbClient = new (hostPortDB, username, password, poolOptions: {maximumPoolSize: 5});
        io:println("DB Client initiated");
        if (self.dbClient is jdbc:Client) {
            io:println("DB Client created successfully");
            io:println(`INSERT INTO itemtable (title, description, includes, intendedFor, color, material, price) VALUES ${title}, ${description}, ${includes}, ${intendedFor}, ${color}, ${material}, ${price})`);
            if (self.dbClient is jdbc:Client) {
                do {
                    if (id == -1 && price is float) {
                        sql:ParameterizedQuery query = `INSERT INTO itemtable (title, description, includes, intendedFor, color, material, price) 
                                VALUES (${title}, ${description}, ${includes}, ${intendedFor}, ${color}, ${material}, ${price})`;
                        sql:ExecutionResult result = check self.dbClient->execute(query);
                        io:println("Item inserted: ", result);
                        int? count = result.affectedRowCount;
                        //The integer or string generated by the database in response to a query execution.
                        string|int? generatedKey = result.lastInsertId;
                        // json jsonResultObject = <json>result;
                        // InsertExecutionResult|error insertExecutionResult = jsonResultObject.fromJsonWithType();
                        if (generatedKey is string) {
                            return generatedKey;
                        } else {
                            return generatedKey.toString();
                        }

                    } else if (id is int && price is float) {
                        sql:ParameterizedQuery query = `UPDATE itemtable SET title = ${title}, description = ${description}, 
                                includes = ${includes}, intendedFor = ${intendedFor}, color = ${color}, material = ${material}, price = ${price}
                                 WHERE ID = ${id};`;
                        sql:ExecutionResult result = check self.dbClient->execute(query);
                        io:println("Item updated: ", result);
                        int? count = result.affectedRowCount;
                        //The integer or string generated by the database in response to a query execution.
                        string|int? generatedKey = result.lastInsertId;
                        // json jsonResultObject = <json>result;
                        // InsertExecutionResult|error insertExecutionResult = jsonResultObject.fromJsonWithType();
                        if (generatedKey is string) {
                            return generatedKey;
                        } else {
                            return generatedKey.toString();
                        }
                    }

                } on fail var e {
                    io:println("Exception occurred when inserting. ", e);
                    return "Exception occurred when inserting or updating";
                }
            }
        }

        // Item item = {Title: "entry.Title", Description: "entry.Description", Includes: "entry.Includes", IntendedFor: "entry.IntendedFor", Color: "entry.Color", Material: "entry.Material", Price: 12.23};
        // return new ItemData(item);

    }

    resource function get items() returns Item[] {
        io:println("items() called: ");
        Item[] items = [];
        do {
            // mysql:Client mysqlClients = check new ("sahackathon.mysql.database.azure.com", "choreo", "wso2!234", "db_name", 3306, connectionPool={maxOpenConnections: 3});
            if (self.dbClient is jdbc:Client) {
                do {
                    // sql:ExecutionResult createTableResult = check self.dbClient->execute(`SELECT * FROM itemtable`);
                    // io:println("DBClient OK: ", createTableResult);
                    sql:ParameterizedQuery query = `SELECT * from itemtable`;
                    stream<Item, sql:Error?> resultStream = self.dbClient->query(query);

                    check from Item item in resultStream
                        do {
                            items.push(item);
                        };
                } on fail var e {
                    io:println("Exception occurred when inserting. ", e);
                }
            }
            io:println(items);
            return items;
        }
    }

}
